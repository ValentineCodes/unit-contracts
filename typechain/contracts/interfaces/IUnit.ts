/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace DataTypes {
  export type ListingStruct = {
    seller: PromiseOrValue<string>;
    nft: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    auction: PromiseOrValue<boolean>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type ListingStructOutput = [
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    seller: string;
    nft: string;
    tokenId: BigNumber;
    token: string;
    price: BigNumber;
    auction: boolean;
    deadline: BigNumber;
  };

  export type OfferStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type OfferStructOutput = [string, BigNumber, BigNumber] & {
    token: string;
    amount: BigNumber;
    deadline: BigNumber;
  };
}

export interface IUnitInterface extends utils.Interface {
  functions: {
    "acceptOffer(address,address,uint256)": FunctionFragment;
    "buyItem(address,uint256)": FunctionFragment;
    "buyItemWithToken(address,uint256,address,uint256)": FunctionFragment;
    "createOffer(address,uint256,address,uint256,uint256)": FunctionFragment;
    "disableAuction(address,uint256,uint256)": FunctionFragment;
    "enableAuction(address,uint256,uint256)": FunctionFragment;
    "extendItemDeadline(address,uint256,uint256)": FunctionFragment;
    "extendOfferDeadline(address,uint256,uint256)": FunctionFragment;
    "getEarnings(address,address)": FunctionFragment;
    "getFees(address)": FunctionFragment;
    "getListing(address,uint256)": FunctionFragment;
    "getOffer(address,address,uint256)": FunctionFragment;
    "listItem(address,uint256,uint256,uint256)": FunctionFragment;
    "listItemWithToken(address,uint256,address,uint256,bool,uint256)": FunctionFragment;
    "removeOffer(address,uint256)": FunctionFragment;
    "unlistItem(address,uint256)": FunctionFragment;
    "updateItemPrice(address,uint256,uint256)": FunctionFragment;
    "updateItemSeller(address,uint256,address)": FunctionFragment;
    "withdrawEarnings(address)": FunctionFragment;
    "withdrawFees(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOffer"
      | "buyItem"
      | "buyItemWithToken"
      | "createOffer"
      | "disableAuction"
      | "enableAuction"
      | "extendItemDeadline"
      | "extendOfferDeadline"
      | "getEarnings"
      | "getFees"
      | "getListing"
      | "getOffer"
      | "listItem"
      | "listItemWithToken"
      | "removeOffer"
      | "unlistItem"
      | "updateItemPrice"
      | "updateItemSeller"
      | "withdrawEarnings"
      | "withdrawFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyItem",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyItemWithToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOffer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disableAuction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "enableAuction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "extendItemDeadline",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "extendOfferDeadline",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEarnings",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFees",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listItem",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listItemWithToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOffer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlistItem",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateItemPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateItemSeller",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEarnings",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyItemWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendItemDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendOfferDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listItemWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlistItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateItemPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateItemSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;

  events: {
    "EarningsWithdrawn(address,address,uint256)": EventFragment;
    "FeesWithdrawn(address,address,uint256)": EventFragment;
    "ItemAuctionDisabled(address,uint256,uint256)": EventFragment;
    "ItemAuctionEnabled(address,uint256,uint256)": EventFragment;
    "ItemBought(address,address,uint256,address,uint256)": EventFragment;
    "ItemDeadlineExtended(address,address,uint256,uint256,uint256)": EventFragment;
    "ItemListed(address,address,uint256,address,uint256,bool,uint256)": EventFragment;
    "ItemPriceUpdated(address,uint256,address,uint256,uint256)": EventFragment;
    "ItemSellerUpdated(address,uint256,address,address)": EventFragment;
    "ItemUnlisted(address,address,uint256)": EventFragment;
    "OfferAccepted(address,address,uint256,address,uint256)": EventFragment;
    "OfferAmountUpdated(address,address,uint256,address,uint256,uint256)": EventFragment;
    "OfferCreated(address,address,uint256,address,uint256,uint256)": EventFragment;
    "OfferDeadlineExtended(address,address,uint256,uint256,uint256)": EventFragment;
    "OfferRemoved(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EarningsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemAuctionDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemAuctionEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemDeadlineExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemSellerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemUnlisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferAmountUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferDeadlineExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferRemoved"): EventFragment;
}

export interface EarningsWithdrawnEventObject {
  owner: string;
  token: string;
  amount: BigNumber;
}
export type EarningsWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  EarningsWithdrawnEventObject
>;

export type EarningsWithdrawnEventFilter =
  TypedEventFilter<EarningsWithdrawnEvent>;

export interface FeesWithdrawnEventObject {
  feeOwner: string;
  token: string;
  amount: BigNumber;
}
export type FeesWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  FeesWithdrawnEventObject
>;

export type FeesWithdrawnEventFilter = TypedEventFilter<FeesWithdrawnEvent>;

export interface ItemAuctionDisabledEventObject {
  nft: string;
  tokenId: BigNumber;
  fixedPrice: BigNumber;
}
export type ItemAuctionDisabledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemAuctionDisabledEventObject
>;

export type ItemAuctionDisabledEventFilter =
  TypedEventFilter<ItemAuctionDisabledEvent>;

export interface ItemAuctionEnabledEventObject {
  nft: string;
  tokenId: BigNumber;
  startingPrice: BigNumber;
}
export type ItemAuctionEnabledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemAuctionEnabledEventObject
>;

export type ItemAuctionEnabledEventFilter =
  TypedEventFilter<ItemAuctionEnabledEvent>;

export interface ItemBoughtEventObject {
  buyer: string;
  nft: string;
  tokenId: BigNumber;
  token: string;
  price: BigNumber;
}
export type ItemBoughtEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  ItemBoughtEventObject
>;

export type ItemBoughtEventFilter = TypedEventFilter<ItemBoughtEvent>;

export interface ItemDeadlineExtendedEventObject {
  owner: string;
  nft: string;
  tokenId: BigNumber;
  oldDeadline: BigNumber;
  newDeadline: BigNumber;
}
export type ItemDeadlineExtendedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  ItemDeadlineExtendedEventObject
>;

export type ItemDeadlineExtendedEventFilter =
  TypedEventFilter<ItemDeadlineExtendedEvent>;

export interface ItemListedEventObject {
  owner: string;
  nft: string;
  tokenId: BigNumber;
  token: string;
  price: BigNumber;
  auction: boolean;
  deadline: BigNumber;
}
export type ItemListedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, boolean, BigNumber],
  ItemListedEventObject
>;

export type ItemListedEventFilter = TypedEventFilter<ItemListedEvent>;

export interface ItemPriceUpdatedEventObject {
  nft: string;
  tokenId: BigNumber;
  token: string;
  oldPrice: BigNumber;
  newPrice: BigNumber;
}
export type ItemPriceUpdatedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber],
  ItemPriceUpdatedEventObject
>;

export type ItemPriceUpdatedEventFilter =
  TypedEventFilter<ItemPriceUpdatedEvent>;

export interface ItemSellerUpdatedEventObject {
  nft: string;
  tokenId: BigNumber;
  oldSeller: string;
  newSeller: string;
}
export type ItemSellerUpdatedEvent = TypedEvent<
  [string, BigNumber, string, string],
  ItemSellerUpdatedEventObject
>;

export type ItemSellerUpdatedEventFilter =
  TypedEventFilter<ItemSellerUpdatedEvent>;

export interface ItemUnlistedEventObject {
  owner: string;
  nft: string;
  tokenId: BigNumber;
}
export type ItemUnlistedEvent = TypedEvent<
  [string, string, BigNumber],
  ItemUnlistedEventObject
>;

export type ItemUnlistedEventFilter = TypedEventFilter<ItemUnlistedEvent>;

export interface OfferAcceptedEventObject {
  offerOwner: string;
  nft: string;
  tokenId: BigNumber;
  token: string;
  amount: BigNumber;
}
export type OfferAcceptedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  OfferAcceptedEventObject
>;

export type OfferAcceptedEventFilter = TypedEventFilter<OfferAcceptedEvent>;

export interface OfferAmountUpdatedEventObject {
  offerOwner: string;
  nft: string;
  tokenId: BigNumber;
  token: string;
  oldAmount: BigNumber;
  newAmount: BigNumber;
}
export type OfferAmountUpdatedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber],
  OfferAmountUpdatedEventObject
>;

export type OfferAmountUpdatedEventFilter =
  TypedEventFilter<OfferAmountUpdatedEvent>;

export interface OfferCreatedEventObject {
  offerOwner: string;
  nft: string;
  tokenId: BigNumber;
  token: string;
  amount: BigNumber;
  deadline: BigNumber;
}
export type OfferCreatedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber],
  OfferCreatedEventObject
>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export interface OfferDeadlineExtendedEventObject {
  offerOwner: string;
  nft: string;
  tokenId: BigNumber;
  oldDeadline: BigNumber;
  newDeadline: BigNumber;
}
export type OfferDeadlineExtendedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  OfferDeadlineExtendedEventObject
>;

export type OfferDeadlineExtendedEventFilter =
  TypedEventFilter<OfferDeadlineExtendedEvent>;

export interface OfferRemovedEventObject {
  nft: string;
  tokenId: BigNumber;
  offerOwner: string;
}
export type OfferRemovedEvent = TypedEvent<
  [string, BigNumber, string],
  OfferRemovedEventObject
>;

export type OfferRemovedEventFilter = TypedEventFilter<OfferRemovedEvent>;

export interface IUnit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUnitInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOffer(
      offerOwner: PromiseOrValue<string>,
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyItem(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyItemWithToken(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOffer(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disableAuction(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableAuction(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    extendItemDeadline(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      extraTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    extendOfferDeadline(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      extraTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getEarnings(
      seller: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFees(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getListing(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.ListingStructOutput]>;

    getOffer(
      offerOwner: PromiseOrValue<string>,
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [DataTypes.OfferStructOutput] & { offer: DataTypes.OfferStructOutput }
    >;

    listItem(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listItemWithToken(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      auction: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeOffer(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlistItem(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateItemPrice(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateItemSeller(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newSeller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawEarnings(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFees(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOffer(
    offerOwner: PromiseOrValue<string>,
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyItem(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyItemWithToken(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOffer(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disableAuction(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableAuction(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  extendItemDeadline(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    extraTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  extendOfferDeadline(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    extraTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getEarnings(
    seller: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFees(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getListing(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.ListingStructOutput>;

  getOffer(
    offerOwner: PromiseOrValue<string>,
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.OfferStructOutput>;

  listItem(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listItemWithToken(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    auction: PromiseOrValue<boolean>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeOffer(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlistItem(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateItemPrice(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateItemSeller(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    newSeller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawEarnings(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFees(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOffer(
      offerOwner: PromiseOrValue<string>,
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyItem(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyItemWithToken(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOffer(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    disableAuction(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    enableAuction(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    extendItemDeadline(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      extraTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    extendOfferDeadline(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      extraTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getEarnings(
      seller: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFees(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getListing(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.ListingStructOutput>;

    getOffer(
      offerOwner: PromiseOrValue<string>,
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.OfferStructOutput>;

    listItem(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    listItemWithToken(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      auction: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOffer(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlistItem(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateItemPrice(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateItemSeller(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newSeller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEarnings(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFees(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EarningsWithdrawn(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): EarningsWithdrawnEventFilter;
    EarningsWithdrawn(
      owner?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): EarningsWithdrawnEventFilter;

    "FeesWithdrawn(address,address,uint256)"(
      feeOwner?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): FeesWithdrawnEventFilter;
    FeesWithdrawn(
      feeOwner?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): FeesWithdrawnEventFilter;

    "ItemAuctionDisabled(address,uint256,uint256)"(
      nft?: null,
      tokenId?: null,
      fixedPrice?: null
    ): ItemAuctionDisabledEventFilter;
    ItemAuctionDisabled(
      nft?: null,
      tokenId?: null,
      fixedPrice?: null
    ): ItemAuctionDisabledEventFilter;

    "ItemAuctionEnabled(address,uint256,uint256)"(
      nft?: null,
      tokenId?: null,
      startingPrice?: null
    ): ItemAuctionEnabledEventFilter;
    ItemAuctionEnabled(
      nft?: null,
      tokenId?: null,
      startingPrice?: null
    ): ItemAuctionEnabledEventFilter;

    "ItemBought(address,address,uint256,address,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      price?: null
    ): ItemBoughtEventFilter;
    ItemBought(
      buyer?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      price?: null
    ): ItemBoughtEventFilter;

    "ItemDeadlineExtended(address,address,uint256,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      oldDeadline?: null,
      newDeadline?: null
    ): ItemDeadlineExtendedEventFilter;
    ItemDeadlineExtended(
      owner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      oldDeadline?: null,
      newDeadline?: null
    ): ItemDeadlineExtendedEventFilter;

    "ItemListed(address,address,uint256,address,uint256,bool,uint256)"(
      owner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      price?: null,
      auction?: null,
      deadline?: null
    ): ItemListedEventFilter;
    ItemListed(
      owner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      price?: null,
      auction?: null,
      deadline?: null
    ): ItemListedEventFilter;

    "ItemPriceUpdated(address,uint256,address,uint256,uint256)"(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      oldPrice?: null,
      newPrice?: PromiseOrValue<BigNumberish> | null
    ): ItemPriceUpdatedEventFilter;
    ItemPriceUpdated(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      oldPrice?: null,
      newPrice?: PromiseOrValue<BigNumberish> | null
    ): ItemPriceUpdatedEventFilter;

    "ItemSellerUpdated(address,uint256,address,address)"(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      oldSeller?: null,
      newSeller?: PromiseOrValue<string> | null
    ): ItemSellerUpdatedEventFilter;
    ItemSellerUpdated(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      oldSeller?: null,
      newSeller?: PromiseOrValue<string> | null
    ): ItemSellerUpdatedEventFilter;

    "ItemUnlisted(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ItemUnlistedEventFilter;
    ItemUnlisted(
      owner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ItemUnlistedEventFilter;

    "OfferAccepted(address,address,uint256,address,uint256)"(
      offerOwner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      amount?: null
    ): OfferAcceptedEventFilter;
    OfferAccepted(
      offerOwner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      amount?: null
    ): OfferAcceptedEventFilter;

    "OfferAmountUpdated(address,address,uint256,address,uint256,uint256)"(
      offerOwner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      oldAmount?: null,
      newAmount?: null
    ): OfferAmountUpdatedEventFilter;
    OfferAmountUpdated(
      offerOwner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      oldAmount?: null,
      newAmount?: null
    ): OfferAmountUpdatedEventFilter;

    "OfferCreated(address,address,uint256,address,uint256,uint256)"(
      offerOwner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      amount?: null,
      deadline?: null
    ): OfferCreatedEventFilter;
    OfferCreated(
      offerOwner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      amount?: null,
      deadline?: null
    ): OfferCreatedEventFilter;

    "OfferDeadlineExtended(address,address,uint256,uint256,uint256)"(
      offerOwner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      oldDeadline?: null,
      newDeadline?: null
    ): OfferDeadlineExtendedEventFilter;
    OfferDeadlineExtended(
      offerOwner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      oldDeadline?: null,
      newDeadline?: null
    ): OfferDeadlineExtendedEventFilter;

    "OfferRemoved(address,uint256,address)"(
      nft?: null,
      tokenId?: null,
      offerOwner?: null
    ): OfferRemovedEventFilter;
    OfferRemoved(
      nft?: null,
      tokenId?: null,
      offerOwner?: null
    ): OfferRemovedEventFilter;
  };

  estimateGas: {
    acceptOffer(
      offerOwner: PromiseOrValue<string>,
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyItem(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyItemWithToken(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOffer(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disableAuction(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableAuction(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    extendItemDeadline(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      extraTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    extendOfferDeadline(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      extraTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getEarnings(
      seller: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFees(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getListing(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOffer(
      offerOwner: PromiseOrValue<string>,
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listItem(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listItemWithToken(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      auction: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeOffer(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlistItem(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateItemPrice(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateItemSeller(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newSeller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawEarnings(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFees(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOffer(
      offerOwner: PromiseOrValue<string>,
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyItem(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyItemWithToken(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOffer(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disableAuction(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableAuction(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    extendItemDeadline(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      extraTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    extendOfferDeadline(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      extraTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getEarnings(
      seller: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFees(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListing(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOffer(
      offerOwner: PromiseOrValue<string>,
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listItem(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listItemWithToken(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      auction: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeOffer(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlistItem(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateItemPrice(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateItemSeller(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      newSeller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEarnings(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
